/* tslint:disable */
/* eslint-disable */
/**
 * Preference public API
 * Preference public API
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  BadRequestError,
  Movie,
  MovieBase,
  MoviesResponse,
} from "../models";
import {
  BadRequestErrorFromJSON,
  BadRequestErrorToJSON,
  MovieFromJSON,
  MovieToJSON,
  MovieBaseFromJSON,
  MovieBaseToJSON,
  MoviesResponseFromJSON,
  MoviesResponseToJSON,
} from "../models";

export interface MoviesCreateRequest {
  movieBase: MovieBase;
}

export interface MoviesDeleteByIdRequest {
  id: string;
}

export interface MoviesGetRequest {
  sortBy?: string;
  sortOrder?: string;
  search?: string;
  searchBy?: MoviesGetSearchByEnum;
  filter?: Array<string>;
  offset?: string;
  limit?: string;
}

export interface MoviesGetByIdRequest {
  id: string;
}

export interface MoviesUpdateByIdRequest {
  movie: Movie;
}

/**
 *
 */
export class MovieApi extends runtime.BaseAPI {
  /**
   * Create movie
   * Create movie
   */
  async moviesCreateRaw(
    requestParameters: MoviesCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Movie>> {
    if (
      requestParameters.movieBase === null ||
      requestParameters.movieBase === undefined
    ) {
      throw new runtime.RequiredError(
        "movieBase",
        "Required parameter requestParameters.movieBase was null or undefined when calling moviesCreate."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/movies`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: MovieBaseToJSON(requestParameters.movieBase),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieFromJSON(jsonValue)
    );
  }

  /**
   * Create movie
   * Create movie
   */
  async moviesCreate(
    requestParameters: MoviesCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Movie> {
    const response = await this.moviesCreateRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Remove movie by id
   * Remove movie by id
   */
  async moviesDeleteByIdRaw(
    requestParameters: MoviesDeleteByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling moviesDeleteById."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/movies/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Remove movie by id
   * Remove movie by id
   */
  async moviesDeleteById(
    requestParameters: MoviesDeleteByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.moviesDeleteByIdRaw(requestParameters, initOverrides);
  }

  /**
   * Get movies list
   * Get movies list
   */
  async moviesGetRaw(
    requestParameters: MoviesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MoviesResponse>> {
    const queryParameters: any = {};

    if (requestParameters.sortBy !== undefined) {
      queryParameters["sortBy"] = requestParameters.sortBy;
    }

    if (requestParameters.sortOrder !== undefined) {
      queryParameters["sortOrder"] = requestParameters.sortOrder;
    }

    if (requestParameters.search !== undefined) {
      queryParameters["search"] = requestParameters.search;
    }

    if (requestParameters.searchBy !== undefined) {
      queryParameters["searchBy"] = requestParameters.searchBy;
    }

    if (requestParameters.filter) {
      queryParameters["filter"] = requestParameters.filter;
    }

    if (requestParameters.offset !== undefined) {
      queryParameters["offset"] = requestParameters.offset;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters["limit"] = requestParameters.limit;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/movies`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MoviesResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get movies list
   * Get movies list
   */
  async moviesGet(
    requestParameters: MoviesGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MoviesResponse> {
    const response = await this.moviesGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get movie by id
   * Get movie by id
   */
  async moviesGetByIdRaw(
    requestParameters: MoviesGetByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Movie>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling moviesGetById."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/movies/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieFromJSON(jsonValue)
    );
  }

  /**
   * Get movie by id
   * Get movie by id
   */
  async moviesGetById(
    requestParameters: MoviesGetByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Movie> {
    const response = await this.moviesGetByIdRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Update movie
   * Update movie by id
   */
  async moviesUpdateByIdRaw(
    requestParameters: MoviesUpdateByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Movie>> {
    if (
      requestParameters.movie === null ||
      requestParameters.movie === undefined
    ) {
      throw new runtime.RequiredError(
        "movie",
        "Required parameter requestParameters.movie was null or undefined when calling moviesUpdateById."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/movies`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: MovieToJSON(requestParameters.movie),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieFromJSON(jsonValue)
    );
  }

  /**
   * Update movie
   * Update movie by id
   */
  async moviesUpdateById(
    requestParameters: MoviesUpdateByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Movie> {
    const response = await this.moviesUpdateByIdRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}

/**
 * @export
 */
export const MoviesGetSearchByEnum = {
  Title: "title",
  Genres: "genres",
} as const;
export type MoviesGetSearchByEnum =
  typeof MoviesGetSearchByEnum[keyof typeof MoviesGetSearchByEnum];
