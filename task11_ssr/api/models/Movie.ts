/* tslint:disable */
/* eslint-disable */
/**
 * Preference public API
 * Preference public API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Movie
 */
export interface Movie {
    /**
     * Movie title
     * @type {string}
     * @memberof Movie
     */
    title: string;
    /**
     * Movie tagline
     * @type {string}
     * @memberof Movie
     */
    tagline?: string;
    /**
     * Movie average raiting
     * @type {number}
     * @memberof Movie
     */
    voteAverage?: number;
    /**
     * Total count of votes for the movie
     * @type {number}
     * @memberof Movie
     */
    voteCount?: number;
    /**
     * Movie release date
     * @type {string}
     * @memberof Movie
     */
    releaseDate?: string;
    /**
     * Url to the poster image
     * @type {string}
     * @memberof Movie
     */
    posterPath: string;
    /**
     * Short description of the movie
     * @type {string}
     * @memberof Movie
     */
    overview: string;
    /**
     * Movie production budget
     * @type {number}
     * @memberof Movie
     */
    budget?: number;
    /**
     * Movie revenue
     * @type {number}
     * @memberof Movie
     */
    revenue?: number;
    /**
     * Movie duration time
     * @type {number}
     * @memberof Movie
     */
    runtime: number;
    /**
     * List of genres
     * @type {Array<string>}
     * @memberof Movie
     */
    genres: Array<string>;
    /**
     * Movie unique identifier
     * @type {number}
     * @memberof Movie
     */
    id: number;
}

/**
 * Check if a given object implements the Movie interface.
 */
export function instanceOfMovie(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "posterPath" in value;
    isInstance = isInstance && "overview" in value;
    isInstance = isInstance && "runtime" in value;
    isInstance = isInstance && "genres" in value;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function MovieFromJSON(json: any): Movie {
    return MovieFromJSONTyped(json, false);
}

export function MovieFromJSONTyped(json: any, ignoreDiscriminator: boolean): Movie {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'title': json['title'],
        'tagline': !exists(json, 'tagline') ? undefined : json['tagline'],
        'voteAverage': !exists(json, 'vote_average') ? undefined : json['vote_average'],
        'voteCount': !exists(json, 'vote_count') ? undefined : json['vote_count'],
        'releaseDate': !exists(json, 'release_date') ? undefined : json['release_date'],
        'posterPath': json['poster_path'],
        'overview': json['overview'],
        'budget': !exists(json, 'budget') ? undefined : json['budget'],
        'revenue': !exists(json, 'revenue') ? undefined : json['revenue'],
        'runtime': json['runtime'],
        'genres': json['genres'],
        'id': json['id'],
    };
}

export function MovieToJSON(value?: Movie | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'title': value.title,
        'tagline': value.tagline,
        'vote_average': value.voteAverage,
        'vote_count': value.voteCount,
        'release_date': value.releaseDate,
        'poster_path': value.posterPath,
        'overview': value.overview,
        'budget': value.budget,
        'revenue': value.revenue,
        'runtime': value.runtime,
        'genres': value.genres,
        'id': value.id,
    };
}

